--@name Music Player 5 HUD
--@author Naki
--@include nakilibs/musicplayer4/tracklist.txt
--@client
--@owneronly

enableHud(owner(),true)

local x, y = render.getGameResolution()
local x = x - 185
require("nakilibs/musicplayer4/tracklist.txt")
tracksSORTED = {}
function sortByName(t)
    local nameIndexMap = {}  -- Map to link names to their original tables
    local names = {}  -- Table to store names for sorting

    -- Extract names and store references to original tables
    for _, entry in ipairs(t) do
        table.insert(names, entry[2])  -- Assuming entry[2] is the 'name'
        nameIndexMap[entry[2]] = entry
    end

    -- Sort names alphabetically
    table.sort(names)

    -- Insert tables in sorted order into 'sorted'
    for _, name in ipairs(names) do
        table.insert(tracksSORTED, nameIndexMap[name])
    end
end

sortByName(tracklist2())
function tracklist()
    return tracksSORTED
end
local buffers = {"RT", "RT2"}
local buffernum = 1
render.createRenderTarget("RT")
render.createRenderTarget("RT2")

local songid = 1

local getTrackList = tracklist()

if songid > table.count(getTrackList) then
    songid = 1
elseif songid <=0 then
    songid = table.count(getTrackList)
end

local track = getTrackList[songid]
local url = track[1]
local name = track[2]
local _snd

function playURL(url2,name)
    print("Now playing "..name)
    wait=true
    if _snd != nil then 
        _snd:stop()
    end
    bass.loadURL(url2,"2d noblock",function(snd)
    _snd = snd
    if snd != nil then
        snd:play()
        snd:setPos(chip():getPos())
        snd:setVolume(0)
        snd:setLooping(1)
        
        alpha = 0
        alpha2 = 0
        alpha3 = 0
        playing = false
    end
end)

end
local permissionSatisfied = true

local function inbox(boxdata)
    local boxpos = boxdata[1]
    local boxsize = boxdata[2]
    local boxpos1 = boxpos - boxsize / 2
    local boxpos2 = boxpos + boxsize / 2
    local localposx, localposy = input.getCursorPos()
    
    local xok = (localposx > boxpos1.x) and (localposx < boxpos2.x)
    local yok = (localposy > boxpos1.y) and (localposy < boxpos2.y)

    --if xok then print("xok") end
    --if yok then print("yok") end

    return xok and yok
end
local function openMenu(boolean)
    if not boolean then
        if menuOpen != false then
            menuOpen = false
            menuMoveCT = timer.curtime()
            scrolling = false
            scroll=0
            localposystore=0
        end
    else
        if menuOpen != true then
            menuOpen = true
            menuMoveCT = timer.curtime()
        end
    end
end
    local menuTex = material.create("UnlitGeneric")
    local menuTex2 = material.createFromImage("icon16/folder.png", "alphatest")
    menuTex:setTexture("$basetexture", menuTex2:getName())
    
    local arrow = material.create("UnlitGeneric")
    local arrow2 = material.createFromImage("icon16/control_end.png", "alphatest")
    arrow:setTexture("$basetexture", arrow2:getName())
    
hook.add("MouseWheeled","",function(delta)
    scroll = scroll - delta*35
end)
local function drawMenu()
    if menuOpen == nil then menuOpen = false end
    if menuMoveCT == nil then menuMoveCT = timer.curtime()-1 end
    local menuOpenToFloat = menuOpen and 1 or 0  -- Now it represents the target state correctly
    local progress = math.clamp((timer.curtime() - menuMoveCT) * 3, 0, 1)
    local progressSongList = math.easeInBack(math.clamp((timer.curtime() - menuMoveCT) * 3, 0, 1))
    
    -- Lerp between closed (-x) and open (0) positions
    local menuMoveMath = menuOpenToFloat * progress + (1 - menuOpenToFloat) * (1 - progress)
    local menuPos = Vector(x*1.5 - x*1.5 * menuMoveMath, 0, 0)
    local songMoveMath = menuOpenToFloat * progressSongList + (1 - menuOpenToFloat) * (1 - progressSongList)
    local songList = Vector(x*1.5 - x*1.5 * songMoveMath, 0, 0)
    
    local dontHide = not (menuOpen == false and progress == 1)
    
    menumoving = progress != 1
    
    -- Get cursor position relative to the screen
    local localposx, localposy = input.getCursorPos()
    if scroll == nil then scroll = 0 end
    if getTrackList != nil then
        if down1 == nil then down1 = false end
        if input.isMouseDown(MOUSE.MOUSE1) and not wait then
            if down1 != true then
                down1 = true
                local boxdata = {Vector(x/2+325-90+4+20,y-65+4+20,0),Vector(40,40,0)}
                --render.drawRect(boxdata[1].x-boxdata[2].x/2,boxdata[1].y-boxdata[2].y/2,boxdata[2].x,boxdata[2].y)
                if inbox(boxdata) then
                    openMenu(!menuOpen)
                end
                local boxdata = {Vector(x/2+325-90+4+20+4+40,y-65+4+20,0),Vector(40,40,0)}
                --render.drawRect(boxdata[1].x-boxdata[2].x/2,boxdata[1].y-boxdata[2].y/2,boxdata[2].x,boxdata[2].y)
                if inbox(boxdata) then
                    if _snd != nil and _snd:isValid() then
                        if not _snd:isPaused() then
                            _snd:pause()
                        else
                            _snd:play()
                        end
                    end
                end
            end
        else
            down1 = false
        end
        if dontHide then
            local menuHeight = y - 60  -- Height where the list disappears sooner
            local itemHeight = 35 + 15  -- Height per item including spacing
            local startIndex = math.max(1, math.floor(scroll / itemHeight))  -- First visible item
            local endIndex = math.min(#getTrackList, math.ceil((scroll + menuHeight) / itemHeight))  -- Last visible item
            
            local fadeStart = scroll + menuHeight + y/2  -- Where fading begins
            local fadeEnd = fadeStart + (itemHeight * 4)  -- Fading fully disappears after 4 items
            
            for i = startIndex, endIndex do
                local song = getTrackList[i]
                
                local yPos = 35 / 2 + (itemHeight * i) - scroll
                local sinOffset = -5 * math.sin(math.rad((timer.curtime() * 0.5 + 0.25 * i) * 180))
            
                -- Adjusted fade calculation across multiple items
                local fadeFactor = math.min(1, math.max(0, (fadeEnd - (yPos + itemHeight * i)) / (fadeEnd - fadeStart)))
                local alpha = (1-fadeFactor) * 255  -- Scale from 0 to 255
                local alpha2 = fadeFactor * 255  -- Scale from 0 to 255
                
                -- Apply alpha to HSV color
                local colorRGB = Color((timer.curtime() * 10 + 180) % 360 - 180, 1, 1):hsvToRGB()
                colorRGB.a = alpha2
                render.setColor(colorRGB)
                render.drawRoundedBox(15, 125 + songList.x + x/2 + sinOffset + alpha, yPos, x/2 + 250, 48)
            
                -- Adjust black background fade for visibility
                local colorblack = Color(0, 0, 0)
                colorblack.a = math.clamp(alpha2 * 5, 0, 255)  -- Make background fade more dramatic
                render.setColor(colorblack)
                render.drawRoundedBox(10, 125 + 4 + songList.x + x/2 + sinOffset + alpha, yPos + 4, x/2 - 8 + 250, 40)
            
                -- Apply text with alpha fade
                render.setColor(colorRGB)
                local ExtraText = song[2]:sub(36, 36) ~= "" and "..." or ""
                render.drawText(165 + x/2 + songList.x + sinOffset + alpha, yPos + 10, song[2]:sub(1, 33) .. ExtraText, TEXT_ALIGN.LEFT)
            end
            if secondPressCT != nil then
                if timer.curtime()-secondPressCT > 0.3 then
                    storeSong = nil
                    secondPress = 0
                    storeSongCurrent = nil
                end
            end
            if secondPressCT == nil then secondPressCT = timer.curtime() end
            if localposy != nil and progress == 1 then
                if progresslast == nil then progresslast = progress end
                
                -- Ensure correct precedence by grouping conditions
                if input.isMouseDown(MOUSE.MOUSE1) and wait != true and progresslast == progress and localposy > 60 then
                    if secondPress == nil then secondPress = 0 end
                    if storeSongCurrent == nil then storeSongCurrent = nil end
                    if down2 == nil then down2 = false end
                    if down2 != true then
                        down2 = true
                        
                        if (timer.curtime()-secondPressCT) > 0.01 then
                            for i, song in ipairs(getTrackList) do
                                -- Calculate position values
                                local posX = 25 + menuPos.x - 5 * math.sin(math.rad((timer.curtime() * 0.5 + 0.25 * i) * 180))
                                local posY = 35 / 2 + (15 + 35) * i - scroll
                                local sizeX, sizeY = x - 25, 48
                            
                                -- Set boxdata with center position and size
                                local boxdata = {Vector(posX + sizeX / 2, posY + sizeY / 2, 0), Vector(sizeX, sizeY, 0)}
                            
                                -- Check if the cursor is inside the box
                                if inbox(boxdata) then
                                    if storeSong == nil then
                                        storeSong = i
                                    else
                                        storeSongCurrent = i
                                    end
                                    if storeSongCurrent == storeSong then
                                        secondPress = secondPress + 1
                                        secondPressCT = timer.curtime()
                                        storeSongCurrent = nil
                                        
                                    end
                                    if secondPress >= 1 then
                                        storeSong = nil
                                        secondPress = 0
                                        track = song
                                        url = track[1]
                                        name = track[2]
                                        volume = volume or 1
                                        playURL(url, name)
                                        openMenu(false)
                                    end
                                    
                                end
                            end
                        end
                        secondPressCT = timer.curtime()
                    end
                else
                    down2 = false
                end
            end
            -- Store progress for next frame
            progresslast = progress
        end
        
        if volume == nil then volume = 1 end
        -- Line 222: Volume Slider Code
        local sliderX, sliderY = x/2-100, y-50  -- Slider position
        local sliderWidth, sliderHeight = 200, 25
        local handleRadius = 25
        local isDragging = false
        
        -- If mouse is held, check if it's dragging the handle
        if scrolling == nil then scrolling = false end
        if input.isMouseDown(MOUSE.MOUSE1) and localposx != nil then
            if isDragging or (localposx >= sliderX-5 and localposx <= sliderX + sliderWidth+5 
                and localposy >= sliderY and localposy <= sliderY + sliderHeight) and scrolling == false then
                isDragging = true
                volume = math.clamp((localposx - sliderX) / sliderWidth, 0, 1)
                if _snd != nil and _snd:isValid() then
                    _snd:setVolume(volume)
                end
            end
        else
            isDragging = false
        end
        
        -- Draw slider background (using one of your predefined colors)
        render.setColor(Color((timer.curtime()*10+180)%360-180, 1, 1):hsvToRGB())  -- Example gray color
        render.drawRoundedBox(15,sliderX-handleRadius/2*2, sliderY-handleRadius/2*0.75, sliderWidth+handleRadius*2, sliderHeight+handleRadius*0.7)
        
        render.setColor(Color(0,0,0))  -- Example gray color
        render.drawRoundedBox(10,sliderX-(handleRadius/2*2-5), sliderY-(handleRadius/2*0.75-5), sliderWidth+handleRadius*2-10, sliderHeight+handleRadius*0.7-10)
        
        -- Draw slider handle
        local handleX = sliderX + volume * sliderWidth
        render.setColor(Color((timer.curtime()*10+180)%360-180, 1, 1):hsvToRGB())  -- White for contrast
        render.drawRoundedBox(5, handleX-handleRadius/2, sliderY-handleRadius/2 + sliderHeight / 2, handleRadius, handleRadius)
        
        render.drawRoundedBox(15,x/2+230-90,y-65,90,48)
        
        render.setColor(Color(0,0,0,255))
        render.drawRoundedBox(10,x/2+230-90+4,y-65+4,90-8,40)
        
        -- Show volume percentage
        render.setColor(Color((timer.curtime()*10+180)%360-180, 1, 1):hsvToRGB())  -- White for contrast
        render.drawText(x/2+185, y-50 - 5, string.format("%.0f%%", volume * 100), TEXT_ALIGN.CENTER)
        
        render.drawRoundedBox(15,x/2+325-90+4,y-65+4,40,40)
        
        render.setColor(Color(0,0,0,255))
        render.drawRoundedBox(10,x/2+325-90+8,y-65+8,40-8,40-8)
        
        render.setColor(Color((timer.curtime()*10+180)%360-180, 1, 1):hsvToRGB())  -- White for contrast
        render.drawRoundedBox(15,x/2+325-90+8+40,y-65+4,40,40)
        
        render.setColor(Color(0,0,0,255))
        render.drawRoundedBox(10,x/2+325-90+12+40,y-65+8,40-8,40-8)
        
        
        render.setColor(Color((timer.curtime()*10+180)%360-180, 1, 1):hsvToRGB())  -- White for contrast
        render.drawRoundedBox(5,x/2+325-90+8+40+20-10,y-65+4+7.5,8,25)
        
        render.setColor(Color((timer.curtime()*10+180)%360-180, 1, 1):hsvToRGB())  -- White for contrast
        render.drawRoundedBox(5,x/2+325-90+8+40+20+2,y-65+4+7.5,8,25)
        
        
        render.setColor(Color((timer.curtime()*10+180)%360-180, 1, 1):hsvToRGB())  -- White for contrast
        render.drawRoundedBox(5,x/2+325-90+8+4,y-65+6+7.5,25,8)
        
        render.setColor(Color((timer.curtime()*10+180)%360-180, 1, 1):hsvToRGB())  -- White for contrast
        render.drawRoundedBox(5,x/2+325-90+8+4,y-65+18+7.5,25,8)
        
    end
end
hook.add("think","",function()
    if _snd != nil and isValid(_snd) then
        _snd:setPos(player():getPos())
    end
end)
local ContextMenuOpen = false
hook.add("OnContextMenuOpen","",function()
    ContextMenuOpen=true
end)
hook.add("OnContextMenuClose","",function()
    ContextMenuOpen=false
    openMenu(false)
end)

hook.add("drawhud","render_gui_stuff",function()
    local snd = _snd
    render.setColor(Color((timer.curtime()*10+180)%360-180, 1, 1):hsvToRGB())  -- Example gray color
    render.setFont("DermaLarge")

    
    if snd != nil and isValid(snd) then
        if not snd:isPaused() then
            if wait != false then
                wait = false
            end
            
            alpha2 = alpha2 + 0.01
            alpha2 = math.clamp(alpha2,0,1)
            if alpha2 >= 1 then
                if playing == false then
                    playing = true
                    if volume == nil then volume = 1 end
                    snd:setVolume(volume)
                    snd:setTime(0)
                end
            end
            
            local n = 64
            local fft = snd:getFFT(n)
            
            --if fft != nil then
                local n = 64
                local fft = snd:getFFT(n)
                for i=1, n do
                    local current = fft[i+1]
                    if current != nil then
                        local width = 512/2/n
                        local pos = -(512/2)+(((512/2*2)/n)*(i-0.5))
                        local x2 = width+pos
                        local lx = width+pos
                        local ly = (current*512)
                        
                        render.drawRect((x+185)/2 + x2,y - ly/2,512/n,ly/2)
                    end
                end
            --end
        end
    end
    
    drawMenu()
end)
